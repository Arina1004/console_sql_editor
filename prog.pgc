#include <stdlib.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>

EXEC SQL include sqlca.h;
EXEC SQL include sqlda.h;


sqlda_t *sqlda1; /* выходной дескриптор */
sqlda_t *sqlda2; /* входной дескриптор */
EXEC SQL BEGIN DECLARE SECTION;

char ConnectionString[]= "phone@localhost:5432";
char Login[]="arinashmeleva";
char Password[] = "";

EXEC SQL END DECLARE SECTION;

EXEC SQL BEGIN DECLARE SECTION;
char prep_string[256];
char title[40];
char n_passport[20];
char full_name[40];
char  network_type[10];
char service_title[40];
char cost[10];
char description[256];
char number[11];
char date_reg[20];
char date_sub[20];
char date_cont[20];
char title_inc[40];
char title_out[40];
char date_call[30];
char out_num[20];
char incoming_num[11];
char  duration[20];
char strSelect [256];
EXEC SQL END DECLARE SECTION;

int show_operators(){
	 EXEC SQL DECLARE OperatorsCursor CURSOR FOR
		SELECT title, network_type  FROM "operators";
	EXEC SQL OPEN OperatorsCursor;
	while(1)
	{
		EXEC SQL FETCH OperatorsCursor INTO :title,  :network_type;

		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
		printf("\t %s \t %s \n", title, network_type);
	}

	EXEC SQL CLOSE OperatorsCursor;
	EXEC SQL COMMIT;
	return 0;

}


int Dynamic_sql_select_more_owners(){
	EXEC SQL BEGIN DECLARE SECTION;
          const char *stmt = "SELECT n_passport, full_name "
             "  FROM owners "
             "  WHERE full_name = ?";
     EXEC SQL END DECLARE SECTION;
		EXEC SQL PREPARE sqlstmt FROM :stmt;
		printf("select full_name >");
        scanf("%s", full_name);

	 EXEC SQL DECLARE OwnersCursor CURSOR FOR sqlstmt;
	EXEC SQL OPEN OwnersCursor USING :full_name;
	while(1)
	{
		EXEC SQL FETCH OwnersCursor INTO :n_passport,  :full_name;

		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
		printf("\t %s \t %s \n", n_passport, full_name);
	}

	EXEC SQL CLOSE OwnersCursor;
	EXEC SQL COMMIT;
	return 0;

}
int Dynamic_sql_select_more_phone(){
	EXEC SQL BEGIN DECLARE SECTION;
          const char *stmt = "SELECT title, number,  date_reg "
             "  FROM phone "
             "  WHERE title = ?";
     EXEC SQL END DECLARE SECTION;
		 EXEC SQL PREPARE sqlstmt FROM :stmt;
		 printf("select title >");
        scanf("%s", title);

	 EXEC SQL DECLARE PhoneCursor CURSOR FOR sqlstmt;
	EXEC SQL OPEN PhoneCursor USING :title;
	while(1)
	{
		EXEC SQL FETCH PhoneCursor INTO :title,  :number, :date_reg;

		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
		printf("\t %s \t %s \t %s \n", title, number,  date_reg );
	}

	EXEC SQL CLOSE PhoneCursor;
	EXEC SQL COMMIT;
	return 0;

}

int Dynamic_sql_select_more_subscriptions(){
	EXEC SQL BEGIN DECLARE SECTION;
char date_sub_2[20];

          const char *stmt = "SELECT title, number, service_title,n_passport, date_sub "
             "  FROM subscriptions "
             "  WHERE date_sub>? and date_sub < ? ";
     EXEC SQL END DECLARE SECTION;
		 EXEC SQL PREPARE sqlstmt FROM :stmt;
		printf("select min date_sub  > ");
        scanf("%s", date_sub);
				printf("select max date_sub  > ");
        scanf("%s", date_sub_2);



	 EXEC SQL DECLARE SubscriptionsCursor CURSOR FOR sqlstmt;

	EXEC SQL OPEN SubscriptionsCursor USING :date_sub, :date_sub_2;
	while(1)
	{
		EXEC SQL FETCH SubscriptionsCursor INTO :title,  :number, :service_title, :n_passport, :date_sub;

		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
		printf("\t %s \t %s \t %s \t %s \t %s \n", title, number, service_title,n_passport, date_sub);
	}

	EXEC SQL CLOSE SubscriptionsCursor;
	EXEC SQL COMMIT;
	return 0;

}

int	Dynamic_sql_select_more_contracts(){
	EXEC SQL BEGIN DECLARE SECTION;

          const char *stmt = "SELECT title, number, date_cont,n_passport "
             "  FROM contracts "
             "  WHERE date_cont>?  ";
     EXEC SQL END DECLARE SECTION;
		 EXEC SQL PREPARE sqlstmt FROM :stmt;

	 EXEC SQL DECLARE ContractsCursor CURSOR FOR sqlstmt;
		printf("select min date_cont  > ");
        scanf("%s", date_cont);
	EXEC SQL OPEN ContractsCursor USING :date_cont;
	while(1)
	{
		EXEC SQL FETCH ContractsCursor INTO :title,  :number, :date_cont, :n_passport;

		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
		printf("\t %s \t %s \t %s \t %s  \n", title, number, date_cont, n_passport);
	}

	EXEC SQL CLOSE ContractsCursor;
	EXEC SQL COMMIT;
	return 0;

}


int Dynamic_sql_select_more_calls(){
	EXEC SQL BEGIN DECLARE SECTION;

          const char *stmt = "SELECT title_inc, title_out, date_call, out_num, incoming_num, duration "
             "  FROM calls "
             "  WHERE incoming_num=? and out_num=? ";
     EXEC SQL END DECLARE SECTION;
		 EXEC SQL PREPARE sqlstmt FROM :stmt;

	 EXEC SQL DECLARE CallsCursor CURSOR FOR sqlstmt;
	 printf("select  incoming_num > ");
        scanf("%s", incoming_num);
				printf("select  out_num > ");
        scanf("%s", out_num);

	EXEC SQL OPEN CallsCursor USING :incoming_num, :out_num;
	while(1)
	{
		EXEC SQL FETCH CallsCursor INTO :title_inc, :title_out, :date_call, :out_num, :incoming_num, :duration;

		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
		printf("\t %s \t %s \t %s \t %s \t %s \t %s \n", title_inc, title_out, date_call, out_num, incoming_num, duration);
	}

	EXEC SQL CLOSE CallsCursor;
	EXEC SQL COMMIT;
	return 0;

}

int show_all()
{
	EXEC SQL BEGIN DECLARE SECTION; int colcount;
		char str[1024];
		char colName[1024];
		int index;
		EXEC SQL END DECLARE SECTION;


		EXEC SQL PREPARE myStr FROM :strSelect;
		EXEC SQL ALLOCATE DESCRIPTOR myDescr;
		EXEC SQL DECLARE show_cursor CURSOR FOR myStr;
		EXEC SQL OPEN show_cursor;
		while (1) {
			EXEC SQL FETCH NEXT FROM show_cursor INTO SQL DESCRIPTOR myDescr;
				if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
				EXEC SQL GET DESCRIPTOR myDescr :colcount = COUNT;
				for(index =1; index <= colcount; index++)
				{
					EXEC SQL GET DESCRIPTOR myDescr VALUE :index :str = DATA;
					EXEC SQL GET DESCRIPTOR myDescr VALUE :index :colName = NAME;
					printf( "%s: %s\t",colName,str);
					}
						printf( "\n");}
				printf( "\n");
	EXEC SQL DEALLOCATE PREPARE myStr;
	EXEC SQL DEALLOCATE DESCRIPTOR myDescr;

    EXEC SQL COMMIT;
    return 0;
}

int Dynamic_sql_insert_operators()
{
EXEC SQL BEGIN DECLARE SECTION;

char stmt[]="INSERT INTO operators(title,network_type) VALUES(?, ?);";
        EXEC SQL END DECLARE SECTION;

       EXEC SQL PREPARE mystmt FROM :stmt;

       EXEC SQL EXECUTE mystmt USING :title, :network_type;
			 if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }
       EXEC SQL COMMIT;
        return 0;
}
int Dynamic_sql_insert_owners()
{
EXEC SQL BEGIN DECLARE SECTION;

char stmt[]="INSERT INTO owners(n_passport, full_name) VALUES(?, ?);";
        EXEC SQL END DECLARE SECTION;

       EXEC SQL PREPARE mystmt FROM :stmt;

       EXEC SQL EXECUTE mystmt USING :n_passport,  :full_name;
			 if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }
       EXEC SQL COMMIT;
        return 0;
}
int Dynamic_sql_insert_services()
{
EXEC SQL BEGIN DECLARE SECTION;

char stmt[]="INSERT INTO services(title, service_title, cost, description) VALUES(?, ?, ?, ?);";
        EXEC SQL END DECLARE SECTION;

       EXEC SQL PREPARE mystmt FROM :stmt;

       EXEC SQL EXECUTE mystmt USING :title,  :service_title, :cost, :description;
			 if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }
       EXEC SQL COMMIT;
        return 0;
}

int Dynamic_sql_insert_subscriptions()
{
EXEC SQL BEGIN DECLARE SECTION;

char stmt[]="INSERT INTO subscriptions(title, number, service_title,n_passport, date_sub) VALUES(?, ?, ?, ?, ?);";
        EXEC SQL END DECLARE SECTION;

       EXEC SQL PREPARE mystmt FROM :stmt;

       EXEC SQL EXECUTE mystmt USING :title,  :number, :service_title, :n_passport, :date_sub;
			 if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }
       EXEC SQL COMMIT;
        return 0;
}

int Dynamic_sql_insert_phone()
{
EXEC SQL BEGIN DECLARE SECTION;

char stmt[]="INSERT INTO phone(title, number,  date_reg ) VALUES(?, ?, ?);";
        EXEC SQL END DECLARE SECTION;

       EXEC SQL PREPARE mystmt FROM :stmt;

       EXEC SQL EXECUTE mystmt USING :title,  :number, :date_reg;
			 if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }
       EXEC SQL COMMIT;
        return 0;
}
int Dynamic_sql_insert_contracts()
{
EXEC SQL BEGIN DECLARE SECTION;

char stmt[]="INSERT INTO contracts(title, number,  date_reg,n_passport ) VALUES(?, ?, ?, ?);";
				EXEC SQL END DECLARE SECTION;

       EXEC SQL PREPARE mystmt FROM :stmt;

       EXEC SQL EXECUTE mystmt USING :title,  :number, :date_reg, :n_passport;
			 if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }
       EXEC SQL COMMIT;
        return 0;
}
int Dynamic_sql_insert_calls()
{
EXEC SQL BEGIN DECLARE SECTION;

char stmt[]="INSERT INTO calls(title_inc, title_out, date_call, out_num, incoming_num, duration ) VALUES(?, ?, ?, ?,?,?);";
				EXEC SQL END DECLARE SECTION;

       EXEC SQL PREPARE mystmt FROM :stmt;

       EXEC SQL EXECUTE mystmt USING :title_inc, :title_out, :date_call, :out_num, :incoming_num, :duration;
			 if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }
       EXEC SQL COMMIT;
        return 0;
}

int Delete_values_opertatos()
{
        printf("select deleted title: ");
        scanf("%s", title);
        EXEC SQL DELETE FROM operators WHERE title = :title;
				if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not delete");
				return 0;
			 }

        EXEC SQL COMMIT;
				return 0;
}

int Delete_values_owners()
{
        printf("select deleted n_passport: ");
        scanf("%s", n_passport);
        EXEC SQL DELETE FROM owners WHERE n_passport = :n_passport;
				if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not delete");
				return 0;
			 }

        EXEC SQL COMMIT;
				return 0;
}
int Delete_values_services()
{
        printf("select deleted title: ");
        scanf("%s", title);
				printf("and service_title: ");
        scanf("%s", service_title);
				printf("%s %s", title,service_title);
        EXEC SQL DELETE FROM services WHERE title = :title and service_title = :service_title;
				if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not delete");
				return 0;
			 }

        EXEC SQL COMMIT;
				return 0;
}
int Delete_values_subscriptions()
{
        printf("select deleted n_passport: ");
        scanf("%s", n_passport);
				printf("and service_title: ");
        scanf("%s", service_title);
				printf("and number: ");
        scanf("%s", number);
				printf("and date_sub: ");
        scanf("%s", date_sub);
        EXEC SQL DELETE FROM subscriptions WHERE n_passport = :n_passport and service_title = :service_title and number = :number and date_sub= :date_sub;
				if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not delete");
				return 0;
			 }

        EXEC SQL COMMIT;
				return 0;
}
int Delete_values_phone()
{
        printf("select deleted title: ");
        scanf("%s", title);
				printf("and number: ");
        scanf("%s", number);

        EXEC SQL DELETE FROM phone WHERE title = :title and number = :number;
				if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not delete");
				return 0;
			 }

        EXEC SQL COMMIT;
				return 0;
}
int Delete_values_contracts()
{
        printf("select deleted n_passport: ");
        scanf("%s", n_passport);
				printf("and title: ");
        scanf("%s", title);
				printf("and number: ");
        scanf("%s", number);
				printf("and date_cont: ");
        scanf("%s", date_cont);
        EXEC SQL DELETE FROM contracts WHERE n_passport = :n_passport and title = :title and number = :number and date_cont= :date_cont;
				if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not delete");
				return 0;
			 }

        EXEC SQL COMMIT;
				return 0;
}

int Delete_values_calls()
{
        printf("select deleted incoming_num: ");
        scanf("%s", incoming_num);
				printf("and out_num: ");
        scanf("%s", out_num);
				printf("and date_call: ");
        scanf("%s[^\n]", date_call);
        EXEC SQL DELETE FROM calls WHERE incoming_num = :incoming_num and out_num = :out_num and date_call= :date_call;
				if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not delete");
				return 0;
			 }

        EXEC SQL COMMIT;
				return 0;
}

int Dynamic_sql_select_owners()
{
	 EXEC SQL BEGIN DECLARE SECTION;
          const char *stmt = "SELECT n_passport, full_name "
             "  FROM owners "
             "  WHERE n_passport=?";
     EXEC SQL END DECLARE SECTION;

     EXEC SQL PREPARE sqlstmt FROM :stmt;

    printf("select n_passport: ");
    scanf("%s", n_passport);

    EXEC SQL EXECUTE sqlstmt INTO :n_passport, :full_name USING :n_passport;
		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)){
		printf("\t %s", "Not Found");
		 return 0;}
    printf("\t %s \t %s \n", n_passport, full_name);



    EXEC SQL COMMIT;
    return 0;
}

int Dynamic_sql_select_operators(){
	 EXEC SQL BEGIN DECLARE SECTION;
          const char *stmt = "SELECT title, network_type "
             "  FROM operators "
             "  WHERE title=?";
     EXEC SQL END DECLARE SECTION;

     EXEC SQL PREPARE sqlstmt FROM :stmt;

    printf("select title: ");
    scanf("%s", title);

    EXEC SQL EXECUTE sqlstmt INTO :title, :network_type USING :title;
		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)){
		printf("\t %s", "Not Found");
		 return 0;}
    printf("\t %s \t %s \n", title, network_type);



    EXEC SQL COMMIT;
    return 0;
}
int Dynamic_sql_select_services(){
	 EXEC SQL BEGIN DECLARE SECTION;

          const char *stmt = "SELECT title, service_title, cost, description "
             "  FROM services "
             "  WHERE title=? and service_title=?";
     EXEC SQL END DECLARE SECTION;

     EXEC SQL PREPARE sqlstmt FROM :stmt;

    printf("select title: ");
    scanf("%s", title);
    printf("and service_title: ");
    scanf("%s", service_title);

    EXEC SQL EXECUTE sqlstmt INTO :title,  :service_title, :cost, :description USING :title,  :service_title;
		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)){
		printf("\t %s", "Not Found");
		 return 0;}
    printf("\t %s \t %s \t %s \t %s \n", title, service_title, cost, description);



    EXEC SQL COMMIT;
    return 0;
}

int Dynamic_sql_select_phone(){
	 EXEC SQL BEGIN DECLARE SECTION;
          const char *stmt = "SELECT title, number,  date_reg "
             "  FROM phone "
             "  WHERE title=? and number=?";
     EXEC SQL END DECLARE SECTION;

     EXEC SQL PREPARE sqlstmt FROM :stmt;

    printf("select title: ");
    scanf("%s", title);
    printf("and number: ");
    scanf("%s", number);
    EXEC SQL EXECUTE sqlstmt INTO :title,  :number, :date_reg USING :title,  :number;
		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)){
		printf("\t %s", "Not Found");
		 return 0;}
    printf("\t %s \t %s \t %s \n", title, number,  date_reg );



    EXEC SQL COMMIT;
    return 0;
}
int Dynamic_sql_select_subscriptions(){
	 EXEC SQL BEGIN DECLARE SECTION;


          const char *stmt = "SELECT title, number, service_title,n_passport, date_sub "
             "  FROM subscriptions "
             "  WHERE service_title=? and number=? and n_passport=? and date_sub=?";
     EXEC SQL END DECLARE SECTION;
     EXEC SQL PREPARE sqlstmt FROM :stmt;

    printf("select n_passport: ");
    scanf("%s", n_passport);
    printf("and service_title: ");
    scanf("%s", service_title);
    printf("and number: ");
    scanf("%s", number);
    printf("and date_sub: ");
    scanf("%s", date_sub);

    EXEC SQL EXECUTE sqlstmt INTO :title,  :number, :service_title, :n_passport, :date_sub USING :number, :service_title, :n_passport, :date_sub;
		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)){
		printf("\t %s", "Not Found");
		 return 0;}
    printf("\t %s \t %s \t %s \t %s \t %s \n", title, number, service_title,n_passport, date_sub);



    EXEC SQL COMMIT;
    return 0;
}

int Dynamic_sql_select_contracts(){
	 EXEC SQL BEGIN DECLARE SECTION;

          const char *stmt = "SELECT title, number, date_cont,n_passport "
             "  FROM contracts "
             "  WHERE title=? and number=? and n_passport=? and date_cont=?";
     EXEC SQL END DECLARE SECTION;
     EXEC SQL PREPARE sqlstmt FROM :stmt;

    printf("select n_passport: ");
    scanf("%s", n_passport);
    printf("and title: ");
    scanf("%s", title);
    printf("and number: ");
    scanf("%s", number);
    printf("and date_cont: ");
    scanf("%s", date_cont);

    EXEC SQL EXECUTE sqlstmt INTO :title,  :number, :date_cont, :n_passport USING :title,  :number, :date_cont, :n_passport;
		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)){
		printf("\t %s", "Not Found");
		 return 0;}
    printf("\t %s \t %s \t %s \t %s  \n", title, number, date_cont, n_passport);



    EXEC SQL COMMIT;
    return 0;
}
int Dynamic_sql_select_calls(){
	 EXEC SQL BEGIN DECLARE SECTION;
          const char *stmt = "SELECT title_inc, title_out, date_call, out_num, incoming_num, duration "
             "  FROM calls "
             "  WHERE incoming_num=? and out_num=? and date_call=?";
     EXEC SQL END DECLARE SECTION;
     EXEC SQL PREPARE sqlstmt FROM :stmt;

    printf("select incoming_num: ");
    scanf("%s", incoming_num);
    printf("and out_num: ");
    scanf("%s", out_num);
    printf("and date_call: ");
    scanf("%s", date_call);
    EXEC SQL EXECUTE sqlstmt INTO :title_inc, :title_out, :date_call, :out_num, :incoming_num, :duration USING :incoming_num,  :out_num, :date_call;
		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)){
		printf("\t %s", "Not Found");
		 return 0;}
    printf("\t %s \t %s \t %s \t %s \t %s \t %s \n", title_inc, title_out, date_call, out_num, incoming_num, duration);


    EXEC SQL COMMIT;
    return 0;
}
int Update_values_operators()
{
        printf("select update title:");
        scanf("%s", title);
        printf("enter new  network_type: ");
        scanf("%s", network_type);


        EXEC SQL UPDATE operators SET network_type = :network_type WHERE title = :title;
				if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }

        EXEC SQL COMMIT;
        return 0;
}
int Update_values_owners()
{
        printf("select update where full_name:");
        scanf("%s", full_name);
        printf("enter new  n_passport: ");
        scanf("%s", n_passport);

        EXEC SQL UPDATE owners SET full_name = :full_name WHERE n_passport = :n_passport;
					if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }

        EXEC SQL COMMIT;
        return 0;
}
int Update_values_services()
{
				printf("select update where title: ");
				scanf("%s", title);
				printf("service_title: ");
				scanf("%s", service_title);
				printf("enter new cost: ");
				scanf("%s", cost);
				printf("description: ");
				scanf("%s", description);

        EXEC SQL UPDATE services SET description = :description WHERE title = :title and service_title = :service_title;
				EXEC SQL UPDATE services SET cost = :cost WHERE title = :title and service_title = :service_title;
					if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }

        EXEC SQL COMMIT;
        return 0;
}
int Update_values_phone()
{
			printf("select update where title: ");
			scanf("%s", title);
			printf("number: ");
			scanf("%s", number);
			printf("enter new date_reg: ");
			scanf("%s", date_reg);

        EXEC SQL UPDATE phone SET date_reg = :date_reg WHERE title = :title and number = :number;
					if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }

        EXEC SQL COMMIT;
        return 0;
}
int Update_values_subscriptions()
{
			printf("select update where number: ");
			scanf("%s", number);
			printf("service_title: ");
			scanf("%s", service_title);
			printf("n_passport: ");
			scanf("%s", n_passport);
			printf("date_sub: ");
			scanf("%s", date_sub);
			printf("enter new title: ");
			scanf("%s", title);
      EXEC SQL UPDATE subscriptions SET title = :title WHERE n_passport = :n_passport and service_title = :service_title and number = :number and date_sub= :date_sub;
				if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }

        EXEC SQL COMMIT;
        return 0;
}

int Update_values_contracts()
{
			printf("No update");
        return 0;
}
int Update_values_calls()
{
			printf(" select update where out_num: ");
			scanf("%s", out_num);
			printf("incoming_num: ");
			scanf("%s", incoming_num);
			printf("date_call: ");
			scanf("%s", date_call);
      printf("enter new title_inc: ");
			scanf("%s", title_inc);
			printf("title_out: ");
			scanf("%s", title_out);
			printf("duration: ");
			scanf("%s", duration);

        EXEC SQL UPDATE calls SET title_inc = :title_inc and title_out = :title_out and duration = :duration WHERE incoming_num = :incoming_num and out_num = :out_num and date_call= :date_call;
					if (strncmp(sqlca.sqlstate,"00",2))
			 {
				printf("%s","Not update");
				return 0;
			 }

        EXEC SQL COMMIT;
        return 0;
}
int Dynamic_sql_select_more_opertatos()
{
	EXEC SQL BEGIN DECLARE SECTION;
          const char *stmt = "SELECT title,network_type "
             "  FROM operators "
             "  WHERE network_type=?";
     EXEC SQL END DECLARE SECTION;

     EXEC SQL PREPARE sqlstmt FROM :stmt;

     EXEC SQL DECLARE operators_cursor CURSOR FOR sqlstmt ;

			printf("select network_type:");
      scanf("%s", network_type);

     EXEC SQL OPEN operators_cursor USING :network_type;


     while (1)
     {
        EXEC SQL FETCH operators_cursor INTO :title, :network_type;
        if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
				printf("\t %s \t %s \n", title, network_type);
     }

    EXEC SQL CLOSE operators_cursor;

    EXEC SQL COMMIT;
    return 0;

}
int Dynamic_sql_select_more_services(){

	EXEC SQL BEGIN DECLARE SECTION;

          const char *stmt = "SELECT title, service_title, cost, description "
             "  FROM services "
             "  WHERE cost=?";
     EXEC SQL END DECLARE SECTION;
		 EXEC SQL PREPARE sqlstmt FROM :stmt;
		printf("select cost  > ");
        scanf("%s", cost);


	 EXEC SQL DECLARE ServicesCursor CURSOR FOR sqlstmt;
	EXEC SQL OPEN ServicesCursor USING :cost;
	while(1)
	{
		EXEC SQL FETCH ServicesCursor INTO :title,  :service_title, :cost, :description;

		if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
		printf("\t %s \t %s \t %s \t %s \n", title, service_title, cost, description);
	}

	EXEC SQL CLOSE ServicesCursor;
	EXEC SQL COMMIT;
	return 0;

}
int select_operators_with_join(){
	EXEC SQL BEGIN DECLARE SECTION;
		const char *stmt="SELECT o.title, o.network_type ,p.number, p.date_reg"
		"FROM phone AS p"
		"INNER JOIN operators AS o ON p.title = o.title WHERE p.date_reg >= ?";
	EXEC SQL END DECLARE SECTION;
	printf("SELECT o.title, o.network_type ,p.number, p.date_reg, FROM phone AS p INNER JOIN operators AS o ON p.title = o.title WHERE p.date_reg >= ?");
	scanf("%s", date_reg);
	EXEC SQL PREPARE select_stmt FROM :stmt;
  EXEC SQL DECLARE select_with_join_one_cursor CURSOR FOR select_stmt;
  EXEC SQL OPEN select_with_join_one_cursor USING :date_reg;

  while(1) {
    EXEC SQL FETCH select_with_join_one_cursor INTO :title, :network_type, :number, :date_reg;
    if (sqlca.sqlcode == ECPG_NOT_FOUND) {printf("Not found\n");}
    if (sqlca.sqlcode == ECPG_NOT_FOUND || strncmp(sqlca.sqlstate,"00",2)) break;
    printf("title: %s\t network_type:%s\t number: %s\t  date_reg: %s\t\n", title, network_type, number, date_reg);
  }
  EXEC SQL CLOSE select_with_join_one_cursor;
  EXEC SQL COMMIT;

  return 0;


}

int menu_query_sql_select_with_join(){
	char sitem[512];
	while(1)
	{
		printf("	1. operators\n");
		printf("	2. owners\n");
		printf("	3. services\n");
		printf("	4. phone\n");
		printf("	5. subscriptions\n");
		printf("	6. contracts\n");
		printf("	7. calls\n");
		printf("	8. back\n");
		printf("	choose menu item > ");
		if(scanf("%s", sitem)!=1) break;

if (strlen(sitem)>1) continue;

	switch(sitem[0])
	{
		case '1':
		{
			printf("_____________________\n");
			printf("3. query with join\n");
			select_operators_with_join();

			printf("_____________________\n");
			break;
		}
		case '2':
		{
			printf("_____________________\n");
			printf("3. query with join\n");
			Update_values_owners();

			printf("_____________________\n");
			break;
		}
		case '3':
		{
			printf("_____________________\n");
			printf("3. query with join\n");
			Update_values_services();
			printf("_____________________\n");
			break;
		}
		case '5':
		{
			printf("_____________________\n");
			printf("3. query with join\n");
			Update_values_subscriptions();

			printf("_____________________\n");
			break;
		}
		case '4':
		{
			printf("_____________________\n");
			printf("3. query with join\n");
			Update_values_phone();

			printf("_____________________\n");
			break;
		}
		case '6':
		{
			printf("_____________________\n");
			printf("3. query with join\n");
			Update_values_contracts();

			printf("_____________________\n");
			break;
		}
		case '7':
		{
			printf("_____________________\n");
			printf("3. query with join\n");
			Update_values_calls();

			printf("_____________________\n");
			break;
		}
		case '8':{
			return 0;

		}
		default: break;
		}
	}
	return 0;

}
int menu_update_values()
{
char sitem[512];
	while(1)
	{
		printf("	1. operators\n");
		printf("	2. owners\n");
		printf("	3. services\n");
		printf("	4. phone\n");
		printf("	5. subscriptions\n");
		printf("	6. contracts\n");
		printf("	7. calls\n");
		printf("	8. back\n");
		printf("	choose menu item > ");
		if(scanf("%s", sitem)!=1) break;

if (strlen(sitem)>1) continue;

	switch(sitem[0])
	{
		case '1':
		{
			printf("_____________________\n");
			printf("3. update values\n");
			Update_values_operators();

			printf("_____________________\n");
			break;
		}
		case '2':
		{
			printf("_____________________\n");
			printf("3. update values\n");
			Update_values_owners();

			printf("_____________________\n");
			break;
		}
		case '3':
		{
			printf("_____________________\n");
			printf("3. update values\n");
			Update_values_services();
			printf("_____________________\n");
			break;
		}
		case '5':
		{
			printf("_____________________\n");
			printf("3. update values\n");
			Update_values_subscriptions();

			printf("_____________________\n");
			break;
		}
		case '4':
		{
			printf("_____________________\n");
			printf("3. update values\n");
			Update_values_phone();

			printf("_____________________\n");
			break;
		}
		case '6':
		{
			printf("_____________________\n");
			printf("3. update values\n");
			Update_values_contracts();

			printf("_____________________\n");
			break;
		}
		case '7':
		{
			printf("_____________________\n");
			printf("3. update values\n");
			Update_values_calls();

			printf("_____________________\n");
			break;
		}
		case '8':{
			return 0;

		}
		default: break;
		}
	}
	return 0;
}

int menu_show()
{
char sitem[512];
	while(1)
	{
		printf("	1. operators\n");
		printf("	2. owners\n");
		printf("	3. services\n");
		printf("	4. phone\n");
		printf("	5. subscriptions\n");
		printf("	6. contracts\n");
		printf("	7. calls\n");
		printf("	8. back\n");
		printf("	choose menu item > ");
		if(scanf("%s", sitem)!=1) break;

if (strlen(sitem)>1) continue;

	switch(sitem[0])
	{
		case '1':
		{
			printf("_____________________\n");
			printf("1. show\n");
			strcpy(strSelect, "select * from operators");
			show_all();
			printf("_____________________\n");
			break;
		}
		case '2':
		{
			printf("_____________________\n");
			printf("1. show\n");
			strcpy(strSelect, "select * from owners");
			show_all();
			printf("_____________________\n");
			break;
		}
		case '3':
		{
			printf("_____________________\n");
			printf("1. show\n");
			strcpy(strSelect, "select * from services");
			show_all();
			printf("_____________________\n");
			break;
		}
		case '5':
		{
			printf("_____________________\n");
			printf("1. show\n");
			strcpy(strSelect, "select * from subscriptions");
			show_all();
			printf("_____________________\n");
			break;
		}
		case '4':
		{
			printf("_____________________\n");
			printf("1. show\n");
			strcpy(strSelect, "select * from phone");
			show_all();
			printf("_____________________\n");
			break;
		}
		case '6':
		{
			printf("_____________________\n");
			printf("1. show\n");
			strcpy(strSelect, "select * from contracts");
			show_all();
			printf("_____________________\n");
			break;
		}
		case '7':
		{
			printf("_____________________\n");
			printf("1. show\n");
			strcpy(strSelect, "select * from calls");
			show_all();
			printf("_____________________\n");
			break;
		}
		case '8':{
			return 0;

		}
		default: break;
		}
	}
	return 0;
}
int menu_DeleteValues()
{
char sitem[512];
	while(1)
	{
		printf("	1. operators\n");
		printf("	2. owners\n");
		printf("	3. services\n");
		printf("	4. phone\n");
		printf("	5. subscriptions\n");
		printf("	6. contracts\n");
		printf("	7. calls\n");
		printf("	8. back\n");
		printf("	choose menu item > ");
		if(scanf("%s", sitem)!=1) break;

if (strlen(sitem)>1) continue;

	switch(sitem[0])
	{
		case '1':
		{
			printf("_____________________\n");
			printf("5. delete values\n");
			Delete_values_opertatos();
			printf("_____________________\n");
			break;
		}
		case '2':
		{
			printf("_____________________\n");
			printf("5. delete values\n");
			Delete_values_owners();
			printf("_____________________\n");
			break;
		}
		case '3':
		{
			printf("_____________________\n");
			printf("5. delete values\n");
			Delete_values_services();
			printf("_____________________\n");
			break;
		}
		case '5':
		{
			printf("_____________________\n");
			printf("5. delete values\n");
			Delete_values_subscriptions();
			printf("_____________________\n");
			break;
		}
		case '4':
		{
			printf("_____________________\n");
			printf("5. delete values\n");
			Delete_values_phone();
			printf("_____________________\n");
			break;
		}
		case '6':
		{
			printf("_____________________\n");
			printf("5. delete values\n");
			Delete_values_contracts();
			printf("_____________________\n");
			break;
		}
		case '7':
		{
			printf("_____________________\n");
			printf("5. delete values\n");
			Delete_values_calls();
			printf("_____________________\n");
			break;
		}
		case '8':{
			return 0;

		}
		default: break;
		}
	}
	return 0;
}
int menu_dynamic_sql_insert()
{
char sitem[512];
	while(1)
	{
		printf("	1. operators\n");
		printf("	2. owners\n");
		printf("	3. services\n");
		printf("	4. phone\n");
		printf("	5. subscriptions\n");
		printf("	6. contracts\n");
		printf("	7. calls\n");
		printf("	8. back\n");
		printf("	choose menu item > ");
		if(scanf("%s", sitem)!=1) break;

if (strlen(sitem)>1) continue;

	switch(sitem[0])
	{
		case '1':
		{
			printf("_____________________\n");
			printf("6. Dynamic sql insert\n");
			printf("Title: ");
			scanf("%s", title);
			printf("Network type: ");
			scanf("%s", network_type);
			Dynamic_sql_insert_operators();
			printf("%s %s %s\n","Add", title, network_type);
			printf("_____________________\n");
			break;
		}
		case '2':
		{
			printf("_____________________\n");
			printf("6. Dynamic sql insert\n");
			printf("n_passport: ");
			scanf("%s", n_passport);
			printf("full_name: ");
			scanf("%s", full_name);
			Dynamic_sql_insert_owners();
			printf("_____________________\n");
			break;
		}
		case '3':
		{
			printf("_____________________\n");
			printf("6. Dynamic sql insert\n");
			printf("title: ");
			scanf("%s", title);
			printf("service_title: ");
			scanf("%s", service_title);
			printf("cost: ");
			scanf("%s", cost);
			printf("description: ");
			scanf("%s", description);
			Dynamic_sql_insert_services();
			printf("_____________________\n");
			break;
		}
		case '5':
		{
			printf("_____________________\n");
			printf("6. Dynamic sql insert\n");
			printf("title: ");
			scanf("%s", title);
			printf("number: ");
			scanf("%s", number);
			printf("service_title: ");
			scanf("%s", service_title);
			printf("n_passport: ");
			scanf("%s", n_passport);
			printf("date_sub: ");
			scanf("%s", date_sub);
			Dynamic_sql_insert_subscriptions();
			printf("_____________________\n");
			break;
		}
		case '4':
		{
			printf("_____________________\n");
			printf("6. Dynamic sql insert\n");
			printf("title: ");
			scanf("%s", title);
			printf("number: ");
			scanf("%s", number);
			printf("date_reg: ");
			scanf("%s", date_reg);
			Dynamic_sql_insert_phone();
			printf("_____________________\n");
			break;
		}
		case '6':
		{
			printf("_____________________\n");
			printf("6. Dynamic sql insert\n");
			printf("title: ");
			scanf("%s", title);
			printf("number: ");
			scanf("%s", number);
			printf("date_cont: ");
			scanf("%s", date_cont);
			printf("n_passport: ");
			scanf("%s", n_passport);
			Dynamic_sql_insert_contracts();
			printf("_____________________\n");
			break;
		}
		case '7':
		{
			printf("_____________________\n");
			printf("6. Dynamic sql insert\n");
			printf("title_inc: ");
			scanf("%s", title_inc);
			printf("title_out: ");
			scanf("%s", title_out);
			printf("date_call: ");
			scanf("%s", date_call);
			printf("out_num: ");
			scanf("%s", out_num);
			printf("incoming_num: ");
			scanf("%s", incoming_num);
			printf("duration: ");
			scanf("%s", duration);
			Dynamic_sql_insert_calls();
			printf("_____________________\n");
			break;
		}
		case '8':{
			return 0;

		}
		default: break;
		}
	}
	return 0;
}

int menu_dynamic_sql_select_more()
{
char sitem[512];
	while(1)
	{
		printf("	1. operators\n");
		printf("	2. owners\n");
		printf("	3. services\n");
		printf("	4. phone\n");
		printf("	5. subscriptions\n");
		printf("	6. contracts\n");
		printf("	7. calls\n");
		printf("	8. back\n");
		printf("	choose menu item > ");
		if(scanf("%s", sitem)!=1) break;

if (strlen(sitem)>1) continue;

	switch(sitem[0])
	{
		case '1':
		{
			printf("_____________________\n");
			printf("8. Dynamic sql select more than one\n");
			Dynamic_sql_select_more_opertatos();
			printf("_____________________\n");
			break;
		}
		case '2':
		{
			printf("_____________________\n");
			printf("8. Dynamic sql select more than one\n");
			Dynamic_sql_select_more_owners();
			printf("_____________________\n");
			break;
		}
		case '3':
		{
			printf("_____________________\n");
			printf("8. Dynamic sql select more than one\n");
			Dynamic_sql_select_more_services();
			printf("_____________________\n");
			break;
		}
		case '5':
		{
			printf("_____________________\n");
			printf("8. Dynamic sql select more than one\n");
			Dynamic_sql_select_more_subscriptions();
			printf("_____________________\n");
			break;
		}
		case '4':
		{
			printf("_____________________\n");
			printf("8. Dynamic sql select more than one\n");
			Dynamic_sql_select_more_phone();
			printf("_____________________\n");
			break;
		}
		case '6':
		{
			printf("_____________________\n");
			printf("8. Dynamic sql select more than one\n");
			Dynamic_sql_select_more_contracts();
			printf("_____________________\n");
			break;
		}
		case '7':
		{
			printf("_____________________\n");
			printf("8. Dynamic sql select more than one\n");
			Dynamic_sql_select_more_calls();
			printf("_____________________\n");
			break;
		}
		case '8':{
			return 0;

		}
		default: break;
		}
	}
	return 0;
}
int menu_dynamic_sql_select()
{
char sitem[512];
	while(1)
	{
		printf("	1. operators\n");
		printf("	2. owners\n");
		printf("	3. services\n");
		printf("	4. phone\n");
		printf("	5. subscriptions\n");
		printf("	6. contracts\n");
		printf("	7. calls\n");
		printf("	8. back\n");
		printf("	choose menu item > ");
		if(scanf("%s", sitem)!=1) break;

if (strlen(sitem)>1) continue;

	switch(sitem[0])
	{
		case '1':
		{
			printf("_____________________\n");
			printf("7. Dynamic sql select one\n");
			Dynamic_sql_select_operators();
			printf("_____________________\n");
			break;
		}
		case '2':
		{
			printf("_____________________\n");
			printf("7. Dynamic sql select one\n");
			strcpy(strSelect, "select * from owners");
			Dynamic_sql_select_owners();
			printf("_____________________\n");
			break;
		}
		case '3':
		{
			printf("_____________________\n");
			printf("7. Dynamic sql select one\n");
			strcpy(strSelect, "select * from services");
			Dynamic_sql_select_services();
			printf("_____________________\n");
			break;
		}
		case '5':
		{
			printf("_____________________\n");
			printf("7. Dynamic sql select one\n");
			strcpy(strSelect, "select * from subscriptions");
			Dynamic_sql_select_subscriptions();
			printf("_____________________\n");
			break;
		}
		case '4':
		{
			printf("_____________________\n");
			printf("7. Dynamic sql select one\n");
			strcpy(strSelect, "select * from phone");
			Dynamic_sql_select_phone();
			printf("_____________________\n");
			break;
		}
		case '6':
		{
			printf("_____________________\n");
			printf("7. Dynamic sql select one\n");
			strcpy(strSelect, "select * from contracts");
			Dynamic_sql_select_contracts();
			printf("_____________________\n");
			break;
		}
		case '7':
		{
			printf("_____________________\n");
			printf("7. Dynamic sql select one\n");
			strcpy(strSelect, "select * from calls");
			Dynamic_sql_select_calls();
			printf("_____________________\n");
			break;
		}
		case '8':{
			return 0;

		}
		default: break;
		}
	}
	return 0;
}


int menu()
{
	char sitem[512];
	while(1)
	{
		printf("1. show\n");
		printf("3. update values\n");
		printf("5. delete values\n");
		printf("6. Dynamic sql insert\n");
		printf("7. Dynamic sql select one\n");
		printf("8. Dynamic sql select more than one\n");
		printf("2. Query with join\n");
		printf("9. quit\n");
		printf("choose menu item > ");
		if(scanf("%s", sitem)!=1) break;

if (strlen(sitem)>1) continue;

	switch(sitem[0])
	{
		case '1':
		{
			printf("_____________________\n");
			printf("1. show\n");
			menu_show();
			printf("_____________________\n");
			break;
		}
		 case '3':
			{
				printf("_____________________\n");
				printf("3. update values\n");
				menu_update_values();
				printf("_____________________\n");
				break;
			}
		 case '5':
			{
				printf("_____________________\n");
				printf("5. delete values\n");
				menu_DeleteValues();
				printf("_____________________\n");
				break;
			}
		case '6':
		{
			printf("_____________________\n");
			printf("6. dynamic_sql_insert\n");
			menu_dynamic_sql_insert();
			printf("_____________________\n");
			break;
		}
		case '7':
			{
				menu_dynamic_sql_select();
				break;
			}

		case '8':
			{
				menu_dynamic_sql_select_more();
				break;
			}

		case '9':
		{
			return 0;
		}
		case '2':
		{
			menu_query_sql_select_with_join();
			return 0;
		}
		default: break;
		}
	}
	return 0;
}



int main(){

 EXEC SQL CONNECT TO :ConnectionString USER :Login using :Password;
 if (sqlca.sqlcode !=0 || strncmp(sqlca.sqlstate,"00",2))
{
	printf("Bad conntected");
	return -1;
}
else
		{
					printf("connect --OK\n");
					menu();
		}
exec sql disconnect;
printf("disconnect --OK\n");

return 0;
}
